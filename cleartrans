#!/bin/bash
amounts=( 4.50 2.50 1.00 8.00 7.25 13.00 10.00 11.25 2.25 3.75 2.15 3.85 )
export trans_count=${#amounts[@]}
until [ ${#ones} -eq "$trans_count" ];do ones+="1"; done
export total=$1
function get_pattern()
    {
    declare -a amounts
    for i in "$@"
    do
        if [ "$count" ]
        then
            amounts+=("$i")
        fi
        count=1
    done
    binary=$(echo "obase=2;$1" | bc)
    if [ "$trans_count" -ne ${#binary} ]
    then
        until [ ${#zeros} -eq $((trans_count-${#binary})) ];do zeros+="0";done
        form_binary="$zeros""$binary"
    else
        form_binary="$binary"
    fi   
    declare -a prices
    for ((n=0; n<trans_count; n++ ))
    do
        if (( "${form_binary:n:1}" ))
        then
            if (( $(echo "${amounts[$n]} <= $total" | bc -l ) ))
            then
                prices+=("${amounts[$n]}")
            else
                exit
            fi
        fi
    done
    sum_formula=$(IFS=+; echo "${prices[*]}")
    sum=$(echo "$sum_formula" | bc -l )
    [ "$sum" == "$total" ] && echo "${prices[*]}"
    }
export -f get_pattern
seq "$((2#$ones))" | parallel get_pattern {} "${amounts[*]}" 
